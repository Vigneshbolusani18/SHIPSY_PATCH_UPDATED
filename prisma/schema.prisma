// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (PgBouncer)
  directUrl = env("DIRECT_URL") // direct (no PgBouncer) for migrate
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"   // <-- add this
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
}

enum ShipmentStatus {
  CREATED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

model Shipment {
  id         String         @id @default(cuid())
  shipmentId String         @unique
  status     ShipmentStatus @default(CREATED)
  isPriority Boolean        @default(false)

  origin      String
  destination String

  shipDate    DateTime
  transitDays Int

  // NEW: capacity planning inputs
  weightTons Float?
  volumeM3   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events      TrackingEvent[]
  assignments VoyageAssignment[]

  // Helpful indexes for list/filter/sort
  @@index([status, isPriority, createdAt])
  @@index([shipDate])
  @@index([shipmentId])
}

enum TrackingEventType {
  CREATED
  SCANNED
  LOADED
  DEPARTED
  ARRIVED
  DELIVERED
  DELAYED
}

model TrackingEvent {
  id         String   @id @default(cuid())
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  eventType  TrackingEventType
  location   String
  notes      String?
  occurredAt DateTime          @default(now())
  createdAt  DateTime          @default(now())

  @@index([shipmentId, occurredAt])
}

model Voyage {
  id          String   @id @default(cuid())
  voyageCode  String   @unique
  vesselName  String
  origin      String
  destination String
  departAt    DateTime
  arriveBy    DateTime
  weightCapT  Float? // tons
  volumeCapM3 Float? // cubic meters
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments VoyageAssignment[]
}

model VoyageAssignment {
  id         String   @id @default(cuid())
  voyageId   String
  shipmentId String
  createdAt  DateTime @default(now())

  voyage   Voyage   @relation(fields: [voyageId], references: [id], onDelete: Cascade)
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@unique([voyageId, shipmentId])
}
